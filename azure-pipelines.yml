# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- azure-pipelines

pr:
- azure-pipelines

jobs:
# Build and test RDMnet on Windows using CMake and Visual Studio 2017.
- job: windows_build
  displayName: 'Windows Build and Test'
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Win32:
        CMAKE_GENERATOR: 'Visual Studio 15 2017'
        ARTIFACT_TYPE: x86
      x64:
        CMAKE_GENERATOR: 'Visual Studio 15 2017 Win64'
        ARTIFACT_TYPE: x64
  steps:
    - powershell
      script: |
        $client = new-object System.Net.WebClient
        $client.DownloadFile("http://download.qt-project.org/official_releases/qt/5.9/5.9.7/qt-opensource-windows-x86-5.9.7.exe", "install-qt-5.9.7.exe")
    - script: |
        install-qt-5.9.7 --verbose --script qt-installer-noninteractive.qs
        echo '##vso[task.setvariable variable=WinArtifactType]%ARTIFACT_TYPE%'
        git clone -b develop https://github.com/ETCLabs/lwpa ../RDMnet/external/lwpa
        git clone -b develop https://github.com/ETCLabs/RDM ../RDMnet/external/RDM
        cd ..\RDMnet\external\lwpa
        git checkout 0aa3362
        cd ..\RDM
        git checkout dd850f2
        cd $(Build.SourcesDirectory)
        mkdir build
        cd build
        cmake --version
        cmake -G "%CMAKE_GENERATOR%" -DCMAKE_INSTALL_PREFIX=install -DRDMNET_BUILD_EXAMPLES=ON -DRDMNET_BUILD_TESTS=ON -DRDMNET_MOCK_DISCOVERY=ON ..
        cmake --build . --config Release
        cmake -P cmake_install.cmake
      displayName: 'RDMnet Windows build'
    - script: ctest -C Release
      displayName: 'RDMnet Windows test'
      env:
        CTEST_OUTPUT_ON_FAILURE: '1'
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'rdmnet_windows_$(WinArtifactType)'
        targetPath: 'build/install'

